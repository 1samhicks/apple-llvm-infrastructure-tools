#!/bin/bash

. "$(dirname "$0")"/helpers/init.sh
helper mt_split2mono
helper mt_llvm_svn2git
helper mt_list_commits

usage() {
    printf "%s\n" \
        "usage: $(print_cmdname) [options] <branch> <ref>:<dir>..."         \
        ""                                                                  \
        "   <branch>      the branch to interleave"                         \
        "   <ref>         a ref to interleave commits from"                 \
        "                   '%<ref>[{no-pass}]' to repeat commits"          \
        "                     from <upstream> (optionally, without passing" \
        "                     other refs)"                                  \
        "                   '-' if there is no relevant split repo"         \
        "   <dir>         the name of the top-level tree to put <ref> into" \
        "                   '-' for root (splat contents)"
}

main() {
    local branch
    local -a refdirs
    parse_cmdline "$@" || return 1

    # Only initialize split2mono db if we will interleave commits.
    # Initializing the blob is not free and there's no point.
    mt_split2mono_init || return 1
    translate_branch "$@" || return 1
    mt_split2mono_save || return 1
}

parse_cmdline() {
    [ $# -ge 1 ] || usage_error "missing <branch>"
    [ $# -ge 2 ] || usage_error "missing <ref>:<dir>..."
    local pos=0
    while [ $# -gt 0 ]; do
        case "$1" in
            --help)
                usage
                exit 0
                ;;
            *:*)
                [ $pos -ne 0 ] || usage_error "invalid branch name '$1'"
                refdirs=( "${refdirs[@]}" "$1" )
                shift
                ;;
            -*)
                usage_error "unknown option '$1'"
                ;;
            *)
                [ $pos -eq 0 ] || usage_error "unexpected argument '$1'"
                branch="$1"
                pos=1
                shift
                ;;
        esac
    done
    [ -n "$branch" ] || usage_error "missing <branch>"
    branch="${branch#refs/heads/}"

    [ ${#refdirs[@]} -gt 0 ] || usage_error "missing <ref>:<dir>"
}

is_translated() { mt_split2mono "$1" >/dev/null 2>/dev/null; }
translate_branch() {
    local current
    current=$(run --hide-errors git rev-parse --verify \
        refs/heads/$branch^{commit}) ||
        current=$ZERO_SHA1

    local r d rd mtref sha1 goal_sha1 start_sha1
    local -a listdirs # refs to list commits of and for which directory
    local -a repeated # directories getting repeated
    local repeated_root # the root is getting repeated
    local -a head_sha1dirs # head sha1 for each active directory
    local -a goal_sha1dirs # goal sha1 for each active directory
    local -a goal_sha1s # goal sha1s without the directories
    local -a other_sha1dirs # other directories as '-:$d' and '%:$d'
    local repeat suffix
    local nopass repeat_stripped
    local declared # all declared directories, except '-'
    local needs_initial_merge should_reset_head
    for rd in "${refdirs[@]}"; do
        r="${rd%:*}"
        d="${rd##*:}"
        suffix="$d/mt-split"

        # Gather all the declared directories for list_new_commits, except for
        # '-'.
        [ "$d" = - ] || declared="$declared${declared:+ }$d"

        # Return early if there is no ref for this directory.
        if [ "$r" = - ]; then
            other_sha1dirs=( "${other_sha1dirs[@]}" "$rd" )
            continue
        fi

        if [ "${r:0:1}" = % ]; then
            # Handle repeat logic for this directory.
            [ -z "$repeat" ] || [ "$repeat" = "${r:1}" ] ||
                error "mismatched repeat in '$rd' (expected: '$repeat')"
            other_sha1dirs=( "${other_sha1dirs[@]}" "%:$d" )

            [ -z "$repeat" ] || continue
            repeat="${r:1}"
            suffix=mt-repeat r="$repeat" d=%
            repeat_stripped="${r%\{no-pass\}}"
            rd="$repeat_stripped:$d"
            [ "$rd" = "$r:$d" ] || nopass=1
        else
            # Figure out the goal sha1 for this directory.  Note that the
            # repeat goal is determined below.
            goal_sha1=$(run --hide-errors \
                git rev-parse --verify $r^{commit}) ||
                error "failed to extract goal sha1 from '$r' for dir '$d'"
            goal_sha1dirs=( "${goal_sha1dirs[@]}" "$goal_sha1:$d" )
            goal_sha1s=( "${goal_sha1s[@]}" "$goal_sha1" )
        fi

        mtref=refs/heads/mt/$branch/$suffix
        head_sha1=$(run --hide-errors \
            git rev-parse --verify $mtref^{commit}) ||
            head_sha1=$ZERO_SHA1

        head_sha1dirs=( "${head_sha1dirs[@]}" "$head_sha1:$d" )
    done

    local head
    head=$(run --hide-errors git rev-parse --verify $branch^{commit})
    [ -n "$head" ] || head=$ZERO_SHA1

    # Figure out the latest commit date coming in, if the repeat is "no-pass".
    # This command takes goal_sha1s implicitly and returns via repeat_sha1.
    if [ -n "$repeat" ]; then
        local repeat_sha1
        mt_list_first_repeat_sha1 "$repeat"
        goal_sha1s=( "${goal_sha1s[@]}" "$repeat_sha1" )
        goal_sha1dirs=( "${goal_sha1dirs[@]}" "$repeat_sha1:%" )
    fi

    process_new_commits </dev/null ||
        exit 1
}

create_initial_merge() {
    [ "${VERBOSE:-0}" = 0 ] || log "translate: create initial merge"

    # From parent: local head
    # From parent: local new_sha1dirs
    # From parent: local -a zero_sha1dirs
    # From parent: local -a start_sha1dirs
    # From parent: local -a nonsha1_sha1dirs
    # Build this here so that build_executable is cached for the pipeline.
    local split2mono
    split2mono="$(build_executable split2mono)" ||
        error "could not build split2mono"

    local output
    output="$(create_initial_merge_impl)" || exit 1
    head="${output%% *}"
    new_sha1dirs="${output#* }"
}

create_initial_merge_impl() {
    local -a main_sha1s
    main_sha1dirs=( "${zero_sha1dirs[@]}" "${nonsha1_sha1dirs[@]}" )
    list_no_commits "${start_sha1dirs[*]}" |
    {
        interleave_commits "${main_sha1dirs[*]}" "${start_sha1dirs[*]}" ||
            error "could not create initial merge"
        printf "%s\n" "$head $new_sha1dirs"
    } || exit 1
}

process_new_commits() {
    # From parent: local head
    # From parent: local -a head_sha1dirs
    # From parent: local -a other_sha1dirs
    # From parent: local -a goal_sha1dirs
    [ "${VERBOSE:-0}" = 0 ] || log "translate: process new commits"

    # Build this here so that build_executable is cached for the pipeline.
    local split2mono
    split2mono="$(build_executable split2mono)" ||
        error "could not build split2mono"

    local new_sha1dirs
    interleave_commits "${main_sha1dirs[*]}" "${goal_sha1dirs[*]}" ||
        error "could not update branch"
    update_refs "$branch" "$current" "${head_sha1dirs[*]}" || exit 1
}

interleave_commits() {
    # From parent: local head
    # From parent: local split2mono
    # From parent: local new_sha1dirs
    # From parent: local -a head_sha1dirs
    # From parent: local -a other_sha1dirs
    # From parent: local -a goal_sha1dirs
    local ref=refs/heads/${branch#refs/heads/}
    local result
    result="$(run "$split2mono" interleave-commits \
        "$MT_DB_SPLIT2MONO_DB" "$MT_DB_SVN2GIT_DB" \
        "$head" "${head_sha1dirs[@]}" "${other_sha1dirs[@]}" \
        -- "${goal_sha1dirs[@]}")" ||
        error "failure interleaving commits"
    head="${result%% *}"
    new_sha1dirs="${result#* }"
    [ "${VERBOSE:-0}" = 0 ] || log "translation: $head $new_sha1dirs"
}

update_refs() {
    # From parent: local head
    # From parent: local new_sha1dirs
    local branch="${1#refs/heads/}"
    local current="$2"
    local old_sha1dirs="$3"

    local ref=refs/heads/$branch
    {
        log "Updating $branch => $head"
        run printf "update %s %s %s\n" $ref $head $current
        local old_sha1 new_sha1 new_sd sd d
        for sd in $old_sha1dirs; do
            d=${sd#*:}
            old_sha1=${sd%:*}
            new_sha1=
            if [ "$d" = % ]; then
                ref=refs/heads/mt/$branch/mt-repeat
            else
                ref=refs/heads/mt/$branch/$d/mt-split
            fi
            for new_sd in $new_sha1dirs; do
                [ "$d" = "${new_sd#*:}" ] || continue
                new_sha1=${new_sd%:*}
                break
            done
            if [ -z "$new_sha1" ]; then
                printf "poison update-ref\n"
                error "missing output sha1 for '$d'"
            fi
            if [ $new_sha1 = $ZERO_SHA1 -a \
                ! "$new_sha1" = "$old_sha1" ]; then
                printf "poison update-ref\n"
                error "internal: new value for $ref is $new_sha1" \
                    "but it was $old_sha1"
            fi
            if [ "$new_sha1" = "$old_sha1" ]; then
                log " - ${ref#refs/heads/} == $new_sha1"
                run printf "verify %s %s\n" $ref $new_sha1
            else
                log " - ${ref#refs/heads/} => $new_sha1"
                run printf "update %s %s %s\n" $ref $new_sha1 $old_sha1
            fi
        done
    } | run git update-ref --stdin ||
        error "failed to update $branch and $refdirs"
}

main "$@"

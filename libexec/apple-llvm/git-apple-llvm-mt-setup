#!/bin/bash

export NONGIT_OK=1
. "$(dirname $0)"/helpers/init.sh
helper canonicalize_path

usage() {
    printf "%s\n"                                                           \
        "usage: $(print_cmdname) [options] <downstream>"                    \
        ""                                                                  \
        "   --git-dir=<dir>   Git directory to use (default: $DEFAULT_GIT_DIR)"
}

APPLE_LLVM_MT_CONFIG="$(
    relative_canonicalize_path "$APPLE_LLVM_LIBEXEC_DIR/../../mt-config")"
print_repos() { cat "$MT_CONFIG" | awk '$1 == "repo" {print $2, $3}'; }

mt_setup() {
    log "setting up mt in $GIT_DIR"
    log "           using $MT_CONFIG"
    [ -d "$GIT_DIR" ] ||
        run git init --bare "$GIT_DIR"
    print_repos | {
        local forks= sleepnext=0
        while read name url; do
            # Wait a second if the previous iteration needed a fresh clone.
            sleep $sleepnext
            [ -d "$clone" ]
            sleep_next=$?

            clone="$GIT_DIR"/clones/$name.git
            if [ -d "$clone" ]; then
                run git --git-dir $clone remote update
            else
                run mkdir -p $(dirname $clone)
                run git clone --mirror $url $clone
                run git --git-dir "$GIT_DIR" remote add $name $PWD/$clone
            fi &
            forks="$forks $!"
        done
        wait $forks
    } &&
    run git --git-dir "$GIT_DIR" fetch --no-tags --all
}

DEFAULT_GIT_DIR=mt-repo.git
GIT_DIR=$DEFAULT_GIT_DIR
if [ "${1%%=*}" = "--git-dir" ]; then
    parse_cmdline_option --git-dir GIT_DIR "$@"
    shift $?
    [ -n "$GIT_DIR" ] || error "--git-dir cannot be empty"
fi

[ $# -ge 1 ] || error "missing mt-config name"
[ $# -le 1 ] || error "too many positional arguments"

NAME="$1"
MT_CONFIG="$APPLE_LLVM_MT_CONFIG/$NAME.mt-config"
[ -f "$MT_CONFIG" ] ||
    error "config for '$NAME' not found at '$MT_CONFIG'"

mt_setup

#!/bin/bash

export NONGIT_OK=1
. "$(dirname $0)"/helpers/init.sh
helper canonicalize_path

usage() {
    printf "%s\n"                                                             \
        "usage: $(print_cmdname) [options] <downstream>"                      \
        ""                                                                    \
        "   --git-dir=<dir> Git directory to use (default: $DEFAULT_GIT_DIR)" \
        "   --[no-]setup    Set up <dir> and update remotes (default: on)"    \
        "   --dry-run       Don't actually generate anything"
}

APPLE_LLVM_MT_CONFIG="$(
    relative_canonicalize_path "$APPLE_LLVM_LIBEXEC_DIR/../../mt-config")"
print_repos() { cat "$MT_CONFIG" | awk '$1 == "repo" {print $2, $3}'; }

mt_setup() {
    log "Setting up and syncing $GIT_DIR"
    log "  (based on $MT_CONFIG)"
    [ -d "$GIT_DIR" ] ||
        run git init --bare "$GIT_DIR" ||
        error "failed to initialize '$GIT_DIR'"
    print_repos | {
        local forks= sleepnext=0
        while read name url; do
            # Wait a second if the previous iteration needed a fresh clone.
            sleep $sleepnext
            [ -d "$clone" ]
            sleep_next=$?

            clone="$GIT_DIR"/clones/$name.git
            if [ -d "$clone" ]; then
                run git --git-dir $clone remote update >/dev/null ||
                    error "failed to update remote '$name'"
            else
                {
                    run mkdir -p $(dirname $clone) >/dev/null &&
                    run git clone --mirror $url $clone >/dev/null &&
                    run git --git-dir "$GIT_DIR" \
                        remote add $name $PWD/$clone >/dev/null
                } ||
                    error "failed to mirror remote '$name'"
            fi &
            forks="$forks $!"
        done
        wait $forks
    } && {
        run git --git-dir "$GIT_DIR" fetch --no-tags --all >/dev/null ||
        error "failed to sync '$GIT_DIR'"
    }
}

has_no_spaces() { [ "${1/ /}" = "$1" ]; }
mt_generate() {
    local action="$1"
    local object="$2"
    local generator="mt_generate_$action"

    # Check that we have a generator for this.
    is_function "$generator" ||
        error "generate: unknown action '$action'"

    # Check for a non-empty argument with no spaces.
    [ -n "$object" ] ||
        error "generate: missing action '$action'"
    has_no_spaces "$object" ||
        error "generate: invalid object '$object'"

    log "Generating $action from $object"
    $generator "$object" || exit 1
}

mt_generate_mapping() {
    local remote=$1
    local branches="$(git --git-dir "$GIT_DIR" show-ref | awk '{print $2}' |
    grep ^refs/remotes/$remote)"

    [ -n "$branches" ] || error "no branches found under '$remote'"
    local branch
    for branch in $branches; do
        run --dry git --git-dir "$GIT_DIR" \
            apple-llvm mt llvm-svn2git-map $branch ||
            error "failed to generate mapping for '$branch'"
    done
}

mt_generate_branch() {
    # Get the branch name and prepend refs/heads/.
    local heads=refs/heads/
    local branch=$1
    [ "${branch:0:${#heads}}" = $heads ] || branch=$heads$branch

    local refdirs="$(cat "$MT_CONFIG" |
    awk -v branch=$branch '$1=="dir"&&$2==branch{print $4":"$3}')"
    local repeat="$(cat "$MT_CONFIG" |
    awk -v branch=$branch '$1=="repeat"&&$2==branch{print $3}')"

    local refdir ref dir
    for refdir in $refdirs; do
        ref=${ref%:*}
        dir=${dir#*:}
        [ "$refdir" = "$ref:$dir" ] ||
            error "generate $branch: invalid 'dir' with colon '$refdir'"
        run git --git-dir "$GIT_DIR" rev-parse $ref^{commit} >/dev/null ||
            error "generate $branch: invalid ref '$ref' in dir '$dir'"
        [ "$dir" = "*" ] &&
            error "generate $branch: invalid dir '$dir' for ref '$ref'"
    done

    if [ -n "$repeat" ]; then
        [ "${repeat:0:${#heads}}" = $heads ] || repeat=$heads$repeat
        run git --git-dir "$GIT_DIR" rev-parse $repeat^{commit} >/dev/null ||
            error "generate $branch: invalid repeat ref '$ref'"
    fi

    run --dry git --git-dir "$GIT_DIR"            \
        apple-llvm mt split2mono-translate-branch \
        ${repeat:+--repeat }$repeat $branch $refdirs ||
        error "failed to generate branch '$branch'"
}

DEFAULT_GIT_DIR=mt-repo.git
GIT_DIR=$DEFAULT_GIT_DIR
SETUP=1
NAME=
while [ $# -gt 0 ]; do
    case "$1" in
        --git-dir|--git-dir=*)
            parse_cmdline_option --git-dir GIT_DIR "$@"
            shift $?
            [ -n "$GIT_DIR" ] || error "--git-dir cannot be empty"
            ;;
        --dry-run)  DRY_RUN=1; shift ;;
        --setup)    SETUP=1; shift ;;
        --no-setup) SETUP=0; shift ;;
        --help|--usage|-h) usage; exit 0 ;;
        -*) error "unknown option '$1'" ;;
        *)
            [ -z "$NAME" ] || error "too many positional arguments"
            [ -n "$1" ] || error "empty name for downstream"
            has_no_spaces "$1" || error "branch name '$1' has spaces"
            NAME=$1
            MT_CONFIG="$APPLE_LLVM_MT_CONFIG/$NAME.mt-config"
            [ -f "$MT_CONFIG" ] ||
                error "config for '$NAME' not found at '$MT_CONFIG'"
            shift
            ;;
    esac
done

[ $SETUP -eq 0 ] || mt_setup || exit 1
cat "$MT_CONFIG" | sort | awk '$1 == "generate" {print $3, $4}' |
while read action object; do
    mt_generate "$action" "$object" ||
        error "failed to generate '$action' using '$object'"
done
exit $?

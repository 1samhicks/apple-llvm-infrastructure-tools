#!/bin/bash

. "$(dirname "$0")"/helpers/init.sh
helper mt_split2mono
helper mt_llvm_svn2git
helper mt_list_commits

usage() {
    printf "%s\n" \
        "usage: $(print_cmdname) <branch> <ref>:<dir>..."                   \
        ""                                                                  \
        "   <branch>      the branch to interleave"                         \
        "   <ref>         a ref to interleave commits from"                 \
        "                   '%<ref>' to repeat commits from <upstream>"     \
        "                   '-' if there is no relevant split repo"         \
        "   <dir>         the name of the top-level tree to put <ref> into" \
        "                   '-' for root (splat contents)"
}

main() {
    [ $# -ge 1 ] || usage_error "missing <branch>"
    [ $# -ge 2 ] || usage_error "missing <ref>:<dir>..."

    mt_split2mono_init &&
    translate_branch "$@" &&
    mt_split2mono_save
}

translate_branch() {
    local branch
    local pos=0
    local repeat=
    local -a refdirs
    local value=
    while [ $# -gt 0 ]; do
        case "$1" in
            --help)
                usage
                exit 0
                ;;
            --repeat|--repeat=*)
                parse_cmdline_option --repeat repeat
                shift $?
                ;;
            -*)
                usage_error "unknown option '$1'"
                ;;
            *)
                if [ $pos -eq 0 ]; then
                    branch="$1"
                else
                    refdirs=( "${refdirs[@]}" "$1" )
                fi
                pos=1
                shift
                ;;
        esac
    done
    [ -n "$branch" ] || usage_error "missing <branch>"
    branch="${branch#refs/heads/}"

    [ ${#refdirs[@]} -gt 0 ] || usage_error "missing <ref>:<dir>"
    [ -z "$repeat" ] || error "--repeat not implemented"

    local current
    current=$(run --hide-errors git rev-parse --verify \
        refs/heads/$branch^{commit}) ||
        current=$ZERO_SHA1

    local d rd ref sha1
    local -a sha1dirs
    local -a refsha1dirs
    for rd in "${refdirs[@]}"; do
        d="${rd##*:}"
        ref=refs/heads/mt/$branch/$d/mt-split
        sha1=$(run --hide-errors git rev-parse --verify $ref^{commit}) ||
            sha1=$ZERO_SHA1
        sha1dirs=( "${sha1dirs[@]}" "$sha1:$d" )
        refsha1dirs=( "${refsha1dirs[@]}" "$ref:$sha1:$d" )
    done

    list_new_split_commits "$branch" "${refdirs[*]}" |
    interleave_commits "$branch" "$repeat" "${sha1dirs[*]}" |
    update_refs "$branch" "$current" "${refsha1dirs[*]}" ||
        error "failure interleaving commits"
}

list_new_split_commits() {
    local branch="$1"
    local refdirs="$2"
    local rd r d head tail format
    for rd in $refdirs; do
        r="${rd%:*}"
        d="${rd##*:}"

        local tailref="refs/heads/mt/$branch/$d/mt-split"
        local headref="refs/remotes/${r#refs/remotes/}"
        tail="$(run --hide-errors git rev-parse --verify $tailref^{commit})"
        head="$(run --hide-errors git rev-parse --verify $headref^{commit})" ||
            error "invalid ref '$headref' from '$rd'"
        [ "$tail" = "$head" ] && continue

        # TODO: add a testcase for d of '-', which requires '--' here.
        local nots="$(run git show-ref -- $d/mt-split |
            grep refs/heads/mt/ | awk '{print $2}')"
        mt_list_commits "$d" $headref --not $nots
    done
}

interleave_commits() {
    local branch="$1"
    local repeat="$2"
    local sha1dirs="$3"

    ref=refs/heads/${branch#refs/heads/}
    local head
    head=$(run --hide-errors git rev-parse --verify $ref^{commit}) ||
        head=$ZERO_SHA1

    local svn2git split2mono
    split2mono="$(build_executable split2mono)" ||
        error "could not build split2mono"
    run "$split2mono" interleave-commits \
        "$MT_DB_SPLIT2MONO_DB" "$MT_DB_SVN2GIT_DB" "$head" $sha1dirs
}

update_refs() {
    local branch="${1#refs/heads/}"
    local current="$2"
    local refsha1dirs="$3"
    local head new_sha1dirs
    read head new_sha1dirs
    [ "${VERBOSE:-0}" = 0 ] || log "translation: $head $new_sha1dirs"

    # Detect failure.  No reason to report a new error.
    [ -n "$head" ] || return 1

    local ref=refs/heads/$branch
    {
        log "Updating $branch => $head"
        run printf "update %s %s %s\n" $ref $head $current
        local nsd old_sha1 new_sha1 rsd sd r d
        for rsd in $refsha1dirs; do
            r=${rsd%%:*}
            d=${rsd##*:}
            sd=${rsd#*:}
            old_sha1=${sd%:*}
            ref=refs/heads/mt/$branch/$d/mt-split
            new_sha1=
            for nsd in $new_sha1dirs; do
                [ "$d" = "${nsd#*:}" ] || continue
                new_sha1=${nsd%:*}
                break
            done
            if [ -z "$new_sha1" ]; then
                printf "poison update-ref\n"
                error "missing output sha1 for $rd"
            fi
            if [ $new_sha1 = $ZERO_SHA1 -a \
                ! "$new_sha1" = "$old_sha1" ]; then
                printf "poison update-ref\n"
                error "internal: new value for $ref is $new_sha1" \
                    "but it was $old_sha1"
            fi
            if [ "$new_sha1" = "$old_sha1" ]; then
                log " - ${ref#refs/heads/} == $new_sha1"
                run printf "verify %s %s\n" $ref $new_sha1
            else
                log " - ${ref#refs/heads/} => $new_sha1"
                run printf "update %s %s %s\n" $ref $new_sha1 $old_sha1
            fi
        done
    } | run git update-ref --stdin ||
        error "failed to update $branch and $refdirs"
}

main "$@"

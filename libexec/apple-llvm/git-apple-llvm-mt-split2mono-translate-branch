#!/bin/bash

. "$(dirname "$0")"/helpers/init.sh
helper mt_split2mono
helper mt_llvm_svn2git

usage() {
    printf "%s\n"                                                            \
        "usage: $(print_cmdname) <branch> "                                  \
        "           [--repeat <upstream>]..."                                \
        "           <ref>:<dir>..."                                          \
        "   <branch>      the branch to interleave"                          \
        "   <upstream>    monorepo upstream to interleave with <ref>:<dir>"  \
        "   <ref>...      the refs for split branches to combine"            \
        "   <dir>...      the dirs for each split branch; '-' for root"      \
        ""                                                                   \
        "   updates these:"                                                  \
        "   refs/heads/mt/<branch>/<dir>/mt-split -> <split-commit>"
}

main() {
    [ $# -ge 1 ] || usage_error "missing <branch>"
    [ $# -ge 2 ] || usage_error "missing <ref>:<dir>..."

    mt_split2mono_init &&
    translate_branch "$@" &&
    mt_split2mono_save
}

translate_branch() {
    local branch
    local pos=0
    local repeat=
    local -a refdirs
    local value=
    while [ $# -gt 0 ]; do
        case "$1" in
            --help)
                usage
                exit 0
                ;;
            --repeat|--repeat=*)
                parse_cmdline_option --repeat repeat
                shift $?
                ;;
            -*)
                usage_error "unknown option '$1'"
                ;;
            *)
                if [ $pos -eq 0 ]; then
                    branch="$1"
                else
                    refdirs=( "${refdirs[@]}" "$1" )
                fi
                pos=1
                shift
                ;;
        esac
    done
    [ -n "$branch" ] || usage_error "missing <branch>"
    branch="${branch#refs/heads/}"

    [ ${#refdirs[@]} -gt 0 ] || usage_error "missing <ref>:<dir>"
    [ -z "$repeat" ] || error "--repeat not implemented"

    local current
    current=$(run --hide-errors git rev-parse --verify \
        refs/heads/$branch^{commit}) ||
        current=0000000000000000000000000000000000000000


    list_new_split_commits "$branch" "${refdirs[@]}" |
    interleave_commits "$branch" "$repeat" "${refdirs[*]}" |
    update_refs "$branch" "$current" "${refdirs[*]}" ||
        error "failure interleaving commits"
}

list_new_split_commits() {
    local branch="$1"
    shift
    local rd r d head tail format
    for rd in "$@"; do
        r="${rd%:*}"
        d="${rd##*:}"

        local tailref="refs/heads/mt/$branch/$d/mt-split"
        local headref="refs/remotes/${r#refs/remotes/}"
        tail="$(run --hide-errors git rev-parse --verify $tailref^{commit})"
        head="$(run --hide-errors git rev-parse --verify $headref^{commit})" ||
            error "invalid ref '$headref' from '$rd'"
        [ "$tail" = "$head" ] && continue

        # TODO: add a testcase for d of '-', which requires '--' here.
        local nots="$(run git show-ref -- $d/mt-split |
            grep refs/heads/mt/ | awk '{print $2}')"
        run printf "start %s\n" "$d"
        run git log $headref --format="%H %ct" --first-parent --not $nots
        run printf "all\n"
        run git log $headref --date-order --date=raw \
            --format="%m%H %T %P%x00%an%n%cn%n%ad%n%cd%n%ae%n%ce%n%B%x00" \
            --boundary --not $nots
        run printf "done\n"
    done
}

interleave_commits() {
    local branch="$1"
    local repeat="$2"
    local refdirs="$3"

    ref=refs/heads/${branch#refs/heads/}
    local head
    head=$(run --hide-errors git rev-parse --verify $ref^{commit}) ||
        head=0000000000000000000000000000000000000000

    local d rd ref sha1
    local -a sha1dirs
    for rd in $refdirs; do
        d="${rd##*:}"
        ref=refs/heads/mt/${branch#refs/heads/}/$d/mt-split
        sha1=$(run --hide-errors git rev-parse --verify $ref^{commit}) ||
            sha1=0000000000000000000000000000000000000000
        sha1dirs=( "${sha1dirs[@]}" "$sha1:$d" )
    done

    local svn2git split2mono
    split2mono="$(build_executable split2mono)" ||
        error "could not build split2mono"
    run "$split2mono" interleave-commits \
        "$MT_DB_SPLIT2MONO_DB" "$MT_DB_SVN2GIT_DB" "$head" "${sha1dirs[@]}"
}

update_refs() {
    local branch="${1#refs/heads/}"
    local current="$2"
    local refdirs="$3"
    local head sha1dirs
    read head sha1dirs

    # Detect failure.  No reason to report a new error.
    [ -n "$head" ] || return 1

    local ref=refs/heads/$branch
    log "Updating $branch => $head"
    run git update-ref $ref $head $current ||
        error "failed to update $branch"
    local sd sha1 rd r d
    for rd in $refdirs; do
        r=${rd%:*}
        d=${rd#*:}
        ref=refs/heads/mt/$branch/$d/mt-split
        sha1=
        for sd in $sha1dirs; do
            [ "$d" = "${sd#*:}" ] || continue
            sha1=${sd%:*}
            break
        done
        [ -n "$sha1" ] || error "missing output sha1 for $rd"
        if [ $sha1 = 0000000000000000000000000000000000000000 ]; then
            sha1=$(run --hide-errors git rev-parse --verify $ref^{commit})
            [ -z "$sha1" ] || error "$ref had a value, but now does not"
            continue
        fi
        log " - ${ref#refs/heads/} => $sha1"
        run git update-ref $ref $sha1 ||
            error "failed to update $ref"
    done
}

main "$@"

#!/bin/bash

. "$(dirname "$0")"/mt-helpers/init.sh
helper mt_llvm_svn
helper mt_llvm_svn2git
helper bisect

usage() { echo "usage: git $COMMAND <commit>"; }

# Make sure this has a rev.
COMMIT=$(run --hide-errors git rev-parse "$1"^{commit}) ||
    error "invalid commit"
REV=$(mt_llvm_svn $COMMIT) ||
    error "no rev for $COMMIT"

# Make sure it's the monorepo.
run git log -1 --format=raw $COMMIT |
run grep -q "^    llvm-svn: $REV\$" ||
    error "$COMMIT is not canonical for $REV"

# Open up a connection to the database.
mt_llvm_svn2git_init --write

# Check if this is mapped.
is_mapped() { mt_llvm_svn2git "$1" >/dev/null ;}
if is_mapped $REV; then
    log "$COMMIT is already mapped to $REV"
    exit 0
fi

# This commit has no SVN revision.
SKIP=afb1d31c54204b7f6c11e4f8815d203bcf9cffa3

# Binary search for the first one not mapped.
# TODO: add a testcase for r1.
# TODO: add a testcase for SKIP.
log "Looking for the first unmapped commit..."
is_commit_mapped() {
    local commit="$1"

    # Clump skipped commits with their parents.
    local rev
    if [ "$commit" = $SKIP ]; then
        rev=$(mt_llvm_svn $commit^) ||
            error "unexpected missing SVN rev for $commit^"
    elif [ -n "$commit" ]; then
        rev=$(mt_llvm_svn $commit) ||
            error "unexpected missing SVN rev for $commit"
    fi

    is_mapped $rev >/dev/null 2>&1
}
LOW=$(bisect is_commit_mapped $COMMIT^) || exit 1

# Update all the refs.
log "Mapping commits..."

# TODO: add a testcase for searching exactly one commit.
REVLIST_ARGS=( $COMMIT --not $LOW )
run git rev-list --reverse --format=raw "${REVLIST_ARGS[@]}" |
mt_llvm_svn_impl --append-commit |
mt_llvm_svn2git_mapper "${REVLIST_ARGS[@]}"

STATUS=$?
if [ $STATUS -eq 0 -o $STATUS -eq 1 ]; then
    log ""
    log "Saving..."
    mt_llvm_svn2git_save
fi
exit $STATUS
